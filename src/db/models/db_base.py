import re
from collections.abc import AsyncGenerator

from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine
from sqlalchemy.orm import as_declarative, declared_attr

from src.config import get_settings

conf = get_settings()


@as_declarative()
class Base:
    """Base class for ORM models.

    Attributes are auto-generated by SQLAlchemy ORM.
    """

    @declared_attr.directive
    @classmethod
    def __tablename__(cls) -> str:
        """Table name in snake_case."""
        name = cls.__name__
        return re.sub(r"(?<!^)(?=[A-Z])", "_", name).lower()

    def to_dict(self) -> dict:
        """Serialize ORM object to dict."""
        return self.__dict__


_db_url = get_settings().DATABASE_URL
engine = create_async_engine(_db_url, echo=False, pool_pre_ping=True)
async_session = async_sessionmaker(bind=engine, expire_on_commit=False)


async def get_session() -> AsyncGenerator[AsyncSession, None]:
    """Async SQLAlchemy session provider."""
    async with async_session() as session:
        yield session
